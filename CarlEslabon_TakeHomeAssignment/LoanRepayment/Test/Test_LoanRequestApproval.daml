module LoanRepayment.Test.Test_LoanRequestApproval where

import Daml.Script

import LoanRepayment.Main.LoanBorrower
import LoanRepayment.Main.LoanRequest
import LoanRepayment.Main.LoanApplication
import LoanRepayment.Main.LoanLimit
import LoanRepayment.Main.Loan

import LoanRepayment.Model.LoanApprovalModel

import LoanRepayment.Test.Util.LoanApprovalTestUtil
import LoanRepayment.Test.Data.LoanRequestApprovalData

-- Simulate the testing for the creation of the Loan Application:
test_LoanRequestApplication : Script (Party, Party, LoanDetails, ContractId LoanBorrower, ContractId LoanApplication)
test_LoanRequestApplication = script do
  [borrower, bank] <- generateParties ["Borrower", "Bank"]

  (borrowerDetails, employmentDetails, loanDetails) <- generateLoanRequestData
  loanBorrowerCID <- submit borrower do createCmd LoanBorrower with ..

  loanApplicationCID <- submit borrower do
    exerciseCmd loanBorrowerCID CreateLoanApplication with loanAppId = "58230947125683", ..

  pure (borrower, bank, loanDetails, loanBorrowerCID, loanApplicationCID)

-- Simulate the testing for the creation of the Loan Limit:
test_LoanLimitCreation : Script (Party, Party, LoanDetails, ContractId LoanBorrower, ContractId LoanLimit)
test_LoanLimitCreation = script do
  (borrower, bank, loanDetails, loanBorrowerCID, loanApplicationCID) <- test_LoanRequestApplication

  loanLimitCID <- submit bank do
    exerciseCmd loanApplicationCID CreateLoanLimit with maxLoanAmount = 1000.00, ..

  pure (borrower, bank, loanDetails, loanBorrowerCID, loanLimitCID)

-- Simulate the testing for the creation of the Loan Request:
test_LoanRequestCreation : Script (Party, Party, ContractId LoanRequest)
test_LoanRequestCreation = script do
  (borrower, bank, loanDetails, loanBorrowerCID, loanLimitCID) <- test_LoanLimitCreation

  loanRequestCID <- submit borrower do
    exerciseCmd loanBorrowerCID CreateLoanRequest with loanReqId = "58230947125683", ..

  pure (borrower, bank, loanRequestCID)

-- Simulate the testing for the approval of the Loan Request:
test_LoanRequestApproval : Script (Party, Party, ContractId Loan)
test_LoanRequestApproval = script do
  (borrower, bank, loanRequestCID) <- test_LoanRequestCreation
  loanCID <- submit bank do exerciseCmd loanRequestCID ApproveRequest

  pure (borrower, bank, loanCID)

-- Simulate the testing for the Token Disbursement:
test_TokenDisbursement : Script (Party, Party, ContractId Loan)
test_TokenDisbursement = script do
  (borrower, bank, loanCID) <- test_LoanRequestApproval

  let loanId = "58230947125683"
  submitMulti [bank, borrower] [] do exerciseCmd loanCID Disburse with mintTokens = 100.0

  Some loanCID <- queryContractKey @Loan bank (bank, borrower, loanId)
  loanCID <- submitMulti [bank, borrower] [] do exerciseCmd loanCID._1 Disburse with mintTokens = 100.0

  Some loanCID <- queryContractKey @Loan bank (bank, borrower, loanId)
  submitMulti [bank, borrower] [] do exerciseCmd loanCID._1 Disburse with mintTokens = 100.0

  -- Invalid transaction with zero or negative mint token value:
  Some loanCID <- queryContractKey @Loan bank (bank, borrower, loanId)
  submitMultiMustFail [bank, borrower] [] do exerciseCmd loanCID._1 Disburse with mintTokens = 0.0

  -- Invalid transaction with the total disbursed amount exceeding the approved loan amount:
  Some loanCID <- queryContractKey @Loan bank (bank, borrower, loanId)
  submitMultiMustFail [bank, borrower] [] do exerciseCmd loanCID._1 Disburse with mintTokens = 100.0

  Some loanCID <- queryContractKey @Loan bank (bank, borrower, loanId)

  pure (borrower, bank, loanCID._1)

-- Simulate the testing for the Repayment Restriction Creation:
test_RepaymentRestrictionCreation : Script (Party, Party, ContractId Loan)
test_RepaymentRestrictionCreation = script do
  (borrower, bank, loanCID) <- test_TokenDisbursement

  submit bank do exerciseCmd loanCID CreateRepaymentRestriction with minRepayment = 100.0

  pure (borrower, bank, loanCID)

-- Simulate the execution of Repayment for the Loan:
test_ExecuteLoanRepayment : Script ()
test_ExecuteLoanRepayment = script do
  (borrower, bank, loanCID) <- test_RepaymentRestrictionCreation

  let loanId = "58230947125683"
  submit borrower do exerciseCmd loanCID Repay with repaymentAmount = 100.0

  Some loanCID <- queryContractKey @Loan bank (bank, borrower, loanId)
  submit borrower do exerciseCmd loanCID._1 Repay with repaymentAmount = 100.0

  Some loanCID <- queryContractKey @Loan bank (bank, borrower, loanId)
  submit borrower do exerciseCmd loanCID._1 Repay with repaymentAmount = 100.0

  -- Invalid transaction with the upcoming repayment amount exceeding the total repaid amount:
  Some loanCID <- queryContractKey @Loan bank (bank, borrower, loanId)
  submitMustFail borrower do exerciseCmd loanCID._1 Repay with repaymentAmount = 100.0

  -- Archive Loan & Token contract. Reset Loan Limt & Repayment Restriction contract:
  submit bank do exerciseCmd loanCID._1 Delete

  -- Invalid transaction given that the Loan Contract has already been archived:
  submitMustFail bank do exerciseCmd loanCID._1 Delete

  pure ()