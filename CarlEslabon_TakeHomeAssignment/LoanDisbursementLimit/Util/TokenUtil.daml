module LoanDisbursementLimit.Util.TokenUtil where

import LoanDisbursementLimit.Main.Token
import LoanDisbursementLimit.Model.DisbursedTokenModel

import DA.Optional

-- Generate the Disbursed Token:
generateDisbursedToken : DisbursedTokenDetails -> Update (ContractId Token)
generateDisbursedToken disbursedTokenDets = do
  let borrower = disbursedTokenDets.borrower; bank = disbursedTokenDets.bank;
        loanId = disbursedTokenDets.loanId; mintTokens = disbursedTokenDets.mintTokens; 
          approvedLoanAmount = disbursedTokenDets.approvedLoanAmount

  isTokenAvail <- lookupByKey @Token (bank, borrower, loanId)

  if isSome isTokenAvail then
    do
      tokenBalance <- fetchByKey @Token (bank, borrower, loanId) >>= 
        (\token -> do return token._2.tokenBalance)

      let updatedTokenBalance = tokenBalance + mintTokens;

      assertMsg ("Overall current token balance: " <> (show updatedTokenBalance) <> " should be " <> 
        "greater than zero and does not exceed approved loan amount: " <> (show approvedLoanAmount)) 
          (updatedTokenBalance > 0.0 && updatedTokenBalance <= approvedLoanAmount)

      exerciseByKey @Token (bank, borrower, loanId) Mint with ..
  else
    do
      assertMsg ("Mint tokens: " <> (show mintTokens) <> " should be " <> 
        "greater than zero and does not exceed approved loan amount: " <> (show approvedLoanAmount)) 
          (mintTokens > 0.0 && mintTokens <= approvedLoanAmount)

      create Token with tokenId = loanId, tokenBalance = mintTokens, ..