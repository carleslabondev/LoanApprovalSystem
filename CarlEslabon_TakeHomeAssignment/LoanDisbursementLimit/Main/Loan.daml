module LoanDisbursementLimit.Main.Loan where

import LoanDisbursementLimit.Main.Token
import LoanDisbursementLimit.Model.LoanApprovalModel
import LoanDisbursementLimit.Model.DisbursedTokenModel
import LoanDisbursementLimit.Util.TokenUtil

template Loan
  with
    borrower : Party
    bank : Party
    loanId : Text
    loanDetails : LoanDetails
    borrowerDetails : BorrowerDetails
    employmentDetails : EmploymentDetails
    approvedLoanAmount : Decimal
    totalDisbursedAmount : Decimal

  where
    signatory borrower, bank

    key (bank, borrower, loanId) : LoanKey
    maintainer key._1

    -- Disburse Token Choice:
    choice Disburse : ContractId Token
      with mintTokens: Decimal
      controller bank, borrower
      do
        -- Create Disbursed Token Contract:
        let disbursedTokenDets = DisbursedTokenDetails with ..
        (tokenCid, updatedMintTokens) <- generateDisbursedToken disbursedTokenDets

        -- Update Total Disbursed Amount:
        create this with totalDisbursedAmount = updatedMintTokens

        return tokenCid

    -- Update Approved Loan Amount Choice:
    choice UpdateApprovedLoanAmount : ContractId Loan
      with updatedApprovedLoanAmount : Decimal
      controller bank
      do
        create this with approvedLoanAmount = updatedApprovedLoanAmount